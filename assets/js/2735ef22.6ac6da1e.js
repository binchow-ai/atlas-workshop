"use strict";(self.webpackChunkatlas_docs_workshop=self.webpackChunkatlas_docs_workshop||[]).push([[698],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>b});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),u=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(o.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),m=r,b=p["".concat(o,".").concat(m)]||p[m]||d[m]||l;return n?a.createElement(b,i(i({ref:t},c),{},{components:n})):a.createElement(b,i({ref:t},c))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[p]="string"==typeof e?e:r,i[1]=s;for(var u=2;u<l;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(7294),r=n(6010);const l={tabItem:"tabItem_Ymn6"};function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(l.tabItem,i),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>k});var a=n(7462),r=n(7294),l=n(6010),i=n(2466),s=n(6550),o=n(1980),u=n(7392),c=n(12);function p(e){return function(e){return r.Children.map(e,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function d(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function b(e){let{queryString:t=!1,groupId:n}=e;const a=(0,s.k6)(),l=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,o._X)(l),(0,r.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(a.location.search);t.set(l,e),a.replace({...a.location,search:t.toString()})}),[l,a])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,l=d(e),[i,s]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:l}))),[o,u]=b({queryString:n,groupId:a}),[p,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,l]=(0,c.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&l.set(e)}),[n,l])]}({groupId:a}),g=(()=>{const e=o??p;return m({value:e,tabValues:l})?e:null})();(0,r.useLayoutEffect)((()=>{g&&s(g)}),[g]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);s(e),u(e),f(e)}),[u,f,l]),tabValues:l}}var g=n(2389);const h={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function v(e){let{className:t,block:n,selectedValue:s,selectValue:o,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,i.o5)(),d=e=>{const t=e.currentTarget,n=c.indexOf(t),a=u[n].value;a!==s&&(p(t),o(a))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:e=>c.push(e),onKeyDown:m,onClick:d},i,{className:(0,l.Z)("tabs__item",h.tabItem,i?.className,{"tabs__item--active":s===t})}),n??t)})))}function y(e){let{lazy:t,children:n,selectedValue:a}=e;if(n=Array.isArray(n)?n:[n],t){const e=n.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},n.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function x(e){const t=f(e);return r.createElement("div",{className:(0,l.Z)("tabs-container",h.tabList)},r.createElement(v,(0,a.Z)({},e,t)),r.createElement(y,(0,a.Z)({},e,t)))}function k(e){const t=(0,g.Z)();return r.createElement(x,(0,a.Z)({key:String(t)},e))}},3949:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>u,default:()=>f,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var a=n(7462),r=(n(7294),n(3905)),l=n(4866),i=n(5162),s=n(4996);const o={sidebar_position:1},u="Explain Plans",c={unversionedId:"indexing-basics/explain-plans",id:"indexing-basics/explain-plans",title:"Explain Plans",description:"When compass is open on sample_mflix database and set on movies collection, lets run a query to work with and analyse its explain plan:",source:"@site/docs/indexing-basics/explain-plans.md",sourceDirName:"indexing-basics",slug:"/indexing-basics/explain-plans",permalink:"/docs/indexing-basics/explain-plans",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/indexing-basics/explain-plans.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Indexing and Explain Plans - Excersize Three",permalink:"/docs/category/indexing-and-explain-plans---excersize-three"},next:{title:"Indexing Basics",permalink:"/docs/indexing-basics/"}},p={},d=[{value:"Filter :",id:"filter-",level:4},{value:"Sort :",id:"sort-",level:4},{value:"Preview",id:"preview",level:4}],m={toc:d},b="wrapper";function f(e){let{components:t,...n}=e;return(0,r.kt)(b,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"explain-plans"},"Explain Plans"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"compass",label:"Compass",mdxType:"TabItem"},(0,r.kt)("p",null,"When compass is open on ",(0,r.kt)("inlineCode",{parentName:"p"},"sample_mflix")," database and set on ",(0,r.kt)("inlineCode",{parentName:"p"},"movies")," collection, lets run a query to work with and analyse its explain plan:"),(0,r.kt)("h4",{id:"filter-"},"Filter :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'    {\n        "cast": "Bill Murray",\n        "year": {$gte: 2000}\n    }\n')),(0,r.kt)("h4",{id:"sort-"},"Sort :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'    {"title": 1}\n')),(0,r.kt)("h4",{id:"preview"},"Preview"),(0,r.kt)("img",{alt:"'Create a database' section in MongoDB Atlas highlighting the 'Build a database' button",src:(0,s.Z)("/img/chapter-2-atlas/query-filter-sort-compass.png"),border:"1px"}),(0,r.kt)("p",null,'Now lets review the "Explain Plan" tab. You should observe that the query is using a ',(0,r.kt)("inlineCode",{parentName:"p"},"COLLSCAN")," to go through all the available documents. In memory sort is being applied and ",(0,r.kt)("inlineCode",{parentName:"p"}," No index available for this query.")),(0,r.kt)("img",{alt:"'Create a database' section in MongoDB Atlas highlighting the 'Build a database' button",src:(0,s.Z)("/img/chapter-2-atlas/query-explain-compass.png"),border:"1px"})),(0,r.kt)(i.Z,{value:"shell",label:"MongoDB Shell",mdxType:"TabItem"},"When logged into our Atlas cluster, lets identify a query to work with and analyse its explain plan",(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'use sample_mflix\n\ndb.movies.find(\n    {\n        "cast": "Bill Murray",\n        "year": {$gte: 2000}\n    }\n)\n.sort(\n    {"title": 1}\n)\n')),(0,r.kt)("p",null,"If we use the ",(0,r.kt)("inlineCode",{parentName:"p"},".explain(true)")," output on that query we will see no index is used with ",(0,r.kt)("inlineCode",{parentName:"p"},"COLLSCAN")," plan chosen"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},' db.movies.find(\n    {\n        "cast": "Bill Murray",\n        "year": {$gte: 2000}\n    }\n)\n.sort(\n    {"title": 1}\n).explain(true)\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},"{ executionStats: {\n  executionSuccess: true,\n  nReturned: 12,\n  executionTimeMillis: 36,\n  totalKeysExamined: 0,\n  totalDocsExamined: 23533,\n  executionStages: {\n    stage: 'SORT',\n    nReturned: 12,\n    executionTimeMillisEstimate: 5,\n    works: 23548,\n    advanced: 12,\n    needTime: 23535,\n    needYield: 0,\n    saveState: 23,\n    restoreState: 23,\n    isEOF: 1,\n    sortPattern: {\n      title: 1\n    },\n    memLimit: 33554432,\n    type: 'simple',\n    totalDataSizeSorted: 24676,\n    usedDisk: false,\n    inputStage: {\n      stage: 'COLLSCAN',\n      filter: {\n        '$and': [\n          {\n            cast: {\n              '$eq': 'Bill Murray'\n            }\n          },\n          {\n            year: {\n              '$gte': 2000\n            }\n          }\n        ]\n      },\n      nReturned: 12,\n      executionTimeMillisEstimate: 5,\n      works: 23535,\n      advanced: 12,\n      needTime: 23522,\n      needYield: 0,\n      saveState: 23,\n      restoreState: 23,\n      isEOF: 1,\n      direction: 'forward',\n      docsExamined: 23533\n    }\n  }\n")))),(0,r.kt)("p",null,"Lets learn how indexes can speedup our queries and lower the database utilisation overhead."))}f.isMDXComponent=!0}}]);